对于水平方向的移动而言,
你也可以用面向单词的动作命令,或是用字符查找动作命令来更快地进行移动

区分实际行与屏幕行，理解实际行与屏幕行间的差别很重要,因为 Vim 提供了不同的动作命令来操作
这两者。 j 和 k 命令会根据实际行向下及向上移动,而 gj 和 gk 则是按屏幕行向下

j 向下移动一个实际行
gj 向下移动一个屏幕行
k 向上移动一个实际行
gk 向上移动一个屏幕行
0 移动到实际行的行首
g0 移动到屏幕行的行首
^ 移动到实际行的第一个非空白字符
g^ 移动到屏幕行的第一个非空白字符
$ 移动到实际行的行尾
g$ 移动到屏幕行的行尾
你可以留意到这样一个特点,即 j 、 k 、 0 和 $ 都用于操作实际行,而如果在这些
键前加上 g 前缀的话,就会让 Vim 对屏幕行进行操作

w 正向移动到下一单词的开头
b 反向移动到当前单词/上一单词的开头
e 正向移动到当前单词/下一单词的结尾
ge 反向移动到上一单词的结尾
把 ea 命令连在一起可被解读为“在当前单词结尾后添加
gea 命令当成“在上一单词结尾后添加”的命令

我们之前遇到过的每个面向单词的动作命令,都有一个面向字串的命令与其对
应,这当中包括 W 、 B 、 E 和 gE 。记住字串之间用空白字符分开而单词比字串多
例子：e.g. we're going too slow

f{char} 命令是在 Vim 中移动的最快方式之一。它会在光标位置与当前行行尾
之间查找指定的字符,如果找到了,就会把光标移到此字符上;如果未找到,则保持光标不动。用 ; 命令就可以重复该命令了

f{char} 正向移动到下一个 {char} 所在之处
F{char} 反向移动到上一个 {char} 所在之处
t{char} 正向移动到下一个 {char} 所在之处的前一个字符上
T{char} 反向移动到上一个 {char} 所在之处的后一个字符上
; 重复上次的字符查找命令
, 反转方向查找上次的字符查找命令

经典操作
{start} I've been expecting you, Mister Bond.
f, I've been expecting you, Mister Bond.
dt. I've been expecting you.

因此我们可以把 f,dt. 训练成手指的下意识动作
虽然字符查找命令( f{char 、 t{char} 等)执行起来方便快捷,但是它们具有一
定的局限性。这些命令一次只能查找一个字符,并且它们只能在当前行内查找
如果想查找一个以上的字符,或是移动到当前行之外的话,就需要使用查找命令/word
用 n 命令重复上次的查找命令,这样就可以跳到下个正确的匹配之处了。另外,如果按 n 键
的次数过多了,我们还可以用 N 命令再跳回来。

启用了 ‘hlsearch’ 功能,以便高亮匹配项

查找命令不仅限于在普通模式下使用,我们也可以在可视模式及操作符待决模式
中使用它,用来完成实际的工作。不用可视模式，学会把 d{motion} 操作符与查找动作结
合在一起使用,这是个很大的进步






























